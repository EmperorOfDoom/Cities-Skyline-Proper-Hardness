// Generated by .NET Reflector from C:\Projects\Skylines\DifficultyMod\DifficultyMod\libs\Assembly-CSharp.dll
using ColossalFramework;
using ColossalFramework.Globalization;
using ColossalFramework.Math;
using ColossalFramework.Plugins;
using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using UnityEngine;

namespace DifficultyMod
{
    public class WBBResidentialBuildingAI3 : ResidentialBuildingAI
    {
        private FireSpread fs = new FireSpread();

        protected override void SimulationStepActive(ushort buildingID, ref Building buildingData, ref Building.Frame frameData)
        {
            base.SimulationStepActive(buildingID, ref buildingData, ref frameData);

            if (SaveData2.saveData.DifficultyLevel != DifficultyLevel.Vanilla)
            {
                Citizen.BehaviourData behaviourData = default(Citizen.BehaviourData);
                int num = 0;
                int citizenCount = 0;
                int num2 = 0;
                int aliveHomeCount = 0;
                int num3 = 0;
                this.GetHomeBehaviour(buildingID, ref buildingData, ref behaviourData, ref num, ref citizenCount, ref num2, ref aliveHomeCount, ref num3);

                Notification.Problem problem = Notification.RemoveProblems(buildingData.m_problems, Notification.Problem.TooFewServices);
                if (buildingData.m_customBuffer1 != 0 && buildingData.m_customBuffer1 < 10)
                {
                    buildingData.m_outgoingProblemTimer = (byte)Mathf.Min(0xff, buildingData.m_outgoingProblemTimer + 1);
                    if (buildingData.m_outgoingProblemTimer >= 200)
                    {
                        problem = Notification.AddProblems(problem, Notification.Problem.MajorProblem | Notification.Problem.TooFewServices);
                    }
                    else if (buildingData.m_outgoingProblemTimer >= 60)
                    {
                        problem = Notification.AddProblems(problem, Notification.Problem.TooFewServices);
                    }
                }
                else
                {
                    buildingData.m_outgoingProblemTimer = 0;
                }
                buildingData.m_problems = problem;
            }

            if (buildingData.m_fireIntensity != 0 && frameData.m_fireDamage > 12 && SaveData2.saveData.disastersEnabled)
            {
                fs.ExtraFireSpread(buildingID, ref buildingData, 45, this.m_info.m_size.y);
            }
        }


        protected void GetHomeBehaviour(ushort buildingID, ref Building buildingData, ref Citizen.BehaviourData behaviour, ref int aliveCount, ref int totalCount, ref int homeCount, ref int aliveHomeCount, ref int emptyHomeCount)
        {
            CitizenManager instance = Singleton<CitizenManager>.instance;
            uint num = buildingData.m_citizenUnits;
            int num2 = 0;
            while (num != 0u)
            {
                if ((ushort)(instance.m_units.m_buffer[(int)((UIntPtr)num)].m_flags & CitizenUnit.Flags.Home) != 0)
                {
                    int num3 = 0;
                    int num4 = 0;
                    instance.m_units.m_buffer[(int)((UIntPtr)num)].GetCitizenHomeBehaviour(ref behaviour, ref num3, ref num4);
                    if (num3 != 0)
                    {
                        aliveHomeCount++;
                        aliveCount += num3;
                    }
                    if (num4 != 0)
                    {
                        totalCount += num4;
                    }
                    else
                    {
                        emptyHomeCount++;
                    }
                    homeCount++;
                }
                num = instance.m_units.m_buffer[(int)((UIntPtr)num)].m_nextUnit;
                if (++num2 > 524288)
                {
                    CODebugBase<LogChannel>.Error(LogChannel.Core, "Invalid list detected!\n" + Environment.StackTrace);
                    break;
                }
            }
        }

        public override void ModifyMaterialBuffer(ushort buildingID, ref Building data, TransferManager.TransferReason material, ref int amountDelta)
        {
            switch (material)
            {
                case TransferManager.TransferReason.Worker0:
                case TransferManager.TransferReason.Worker1:
                case TransferManager.TransferReason.Worker2:
                case TransferManager.TransferReason.Worker3:
                    {
                        if (data.m_customBuffer1 == 0)
                        {
                            data.m_customBuffer1 = (ushort)(120 + WBLevelUp8.GetWealthThreshhold(data.Info.m_class.m_level - 1));
                        }

                        if (amountDelta > 0)
                        {
                            DistrictManager instance = Singleton<DistrictManager>.instance;
                            byte district = instance.GetDistrict(data.m_position);
                            DistrictPolicies.Taxation taxationPolicies = instance.m_districts.m_buffer[(int)district].m_taxationPolicies;
                            int taxRate = Singleton<EconomyManager>.instance.GetTaxRate(this.m_info.m_class, taxationPolicies);
                            amountDelta += (50 - taxRate * 4);
                            amountDelta = Math.Max(2, amountDelta / CalculateHomeCount(data));
                        }
                        else
                        {

                            amountDelta = Math.Min(-2, amountDelta / CalculateHomeCount(data));
                        }
                        
                        data.m_customBuffer1 = (ushort)Mathf.Clamp(data.m_customBuffer1 + amountDelta, 1, 30000);
                        return;
                    }
            }
            base.ModifyMaterialBuffer(buildingID, ref data, material, ref amountDelta);
        }

        public static int CalculateHomeCount(Building data)
        {
            var iClass = data.Info.m_class;
            int num;
            if (iClass.m_subService == ItemClass.SubService.ResidentialLow)
            {
                if (iClass.m_level == ItemClass.Level.Level1)
                {
                    num = 20;
                }
                else if (iClass.m_level == ItemClass.Level.Level2)
                {
                    num = 25;
                }
                else if (iClass.m_level == ItemClass.Level.Level3)
                {
                    num = 30;
                }
                else if (iClass.m_level == ItemClass.Level.Level4)
                {
                    num = 35;
                }
                else
                {
                    num = 40;
                }
            }
            else if (iClass.m_level == ItemClass.Level.Level1)
            {
                num = 60;
            }
            else if (iClass.m_level == ItemClass.Level.Level2)
            {
                num = 100;
            }
            else if (iClass.m_level == ItemClass.Level.Level3)
            {
                num = 130;
            }
            else if (iClass.m_level == ItemClass.Level.Level4)
            {
                num = 150;
            }
            else
            {
                num = 160;
            }
            return Mathf.Max(100, data.m_width * data.m_length * num) / 100;
        }

        public override string GetLocalizedStatus(ushort buildingID, ref Building data)
        {
            if (SaveData2.saveData.DifficultyLevel == DifficultyLevel.Vanilla)
            {
                return base.GetLocalizedStatus(buildingID, ref data);
            }

            var wealth = data.m_customBuffer1;
            if (wealth == 0)
            {
                wealth = (ushort)(120 + WBLevelUp8.GetWealthThreshhold(data.Info.m_class.m_level - 1));
            }
            var result = base.GetLocalizedStatus(buildingID, ref data) + "  Wealth: " + wealth.ToString();
            if (data.Info.m_class.m_level != ItemClass.Level.Level5){
                result += "/" + WBLevelUp8.GetWealthThreshhold(data.Info.m_class.m_level);
            }
            else
            {
            }
            int landValue;
            Singleton<ImmaterialResourceManager>.instance.CheckLocalResource(ImmaterialResourceManager.Resource.LandValue, data.m_position, out landValue);
            result += "  Land Value: " + landValue;
            if (data.Info.m_class.m_level != ItemClass.Level.Level5)
            {
                result += "/" + WBLevelUp8.GetLandValueThreshhold(data.Info.m_class.m_level);
            }
            else
            {
                result += " (Max Level)";
            }

            if (wealth < WBLevelUp8.GetWealthThreshhold((ItemClass.Level)Math.Max(-1, (int)data.Info.m_class.m_level - 2)))
            {
                result += " Wealth too low for level! (" + WBLevelUp8.GetWealthThreshhold(data.Info.m_class.m_level-1) + " min)";
            }
            if (landValue < WBLevelUp8.GetLandValueThreshhold((ItemClass.Level)Math.Max(-1, (int)data.Info.m_class.m_level - 2)))
            {
                result += " Land value too low for level! (" + WBLevelUp8.GetLandValueThreshhold(data.Info.m_class.m_level - 1) + " min)";
            }
            return result;
        }

        internal void UpdateLevelUpInfo(Dictionary<ImmaterialResourceManager.Resource, ColossalFramework.UI.UIProgressBar> dictionary1, Dictionary<ImmaterialResourceManager.Resource, ColossalFramework.UI.UIProgressBar> dictionary2, ColossalFramework.UI.UIProgressBar uIProgressBar1, ColossalFramework.UI.UIProgressBar uIProgressBar2, ColossalFramework.UI.UIProgressBar uIProgressBar3)
        {
            
        }
    }

}

