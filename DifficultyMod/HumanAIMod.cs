// Generated by .NET Reflector from C:\Projects\Skylines\DifficultyMod\DifficultyMod\libs\Assembly-CSharp.dll
using ColossalFramework;
using ColossalFramework.Math;
using ColossalFramework.Plugins;
using System;
using System.Runtime.InteropServices;
using UnityEngine;

public class HumanAIMod : CitizenAI
{
    protected virtual void ArriveAtDestination(ushort instanceID, ref CitizenInstance citizenData, bool success)
    {
        uint citizen = citizenData.m_citizen;
        if (citizen != 0)
        {
            CitizenManager instance = Singleton<CitizenManager>.instance;
            instance.m_citizens.m_buffer[citizen].SetVehicle(citizen, 0, 0);
            if (success)
            {
                instance.m_citizens.m_buffer[citizen].SetLocationByBuilding(citizen, citizenData.m_targetBuilding);
                if ((citizenData.m_targetBuilding != 0) && (instance.m_citizens.m_buffer[citizen].CurrentLocation == Citizen.Location.Visit))
                {
                    BuildingManager manager2 = Singleton<BuildingManager>.instance;
                    BuildingInfo info = manager2.m_buildings.m_buffer[citizenData.m_targetBuilding].Info;
                    int amountDelta = -100;
                    info.m_buildingAI.ModifyMaterialBuffer(citizenData.m_targetBuilding, ref manager2.m_buildings.m_buffer[citizenData.m_targetBuilding], TransferManager.TransferReason.Shopping, ref amountDelta);
                }
                else if (citizenData.m_sourceBuilding != 0 && instance.m_citizens.m_buffer[citizen].CurrentLocation == Citizen.Location.Work)
                {
                    BuildingManager manager2 = Singleton<BuildingManager>.instance;
                    BuildingInfo info = manager2.m_buildings.m_buffer[citizenData.m_sourceBuilding].Info;
                    int amountDelta = -100;
                    info.m_buildingAI.ModifyMaterialBuffer(citizenData.m_sourceBuilding, ref manager2.m_buildings.m_buffer[citizenData.m_sourceBuilding], TransferManager.TransferReason.Worker0, ref amountDelta);
                }
            }            
        }
        if (((citizenData.m_flags & CitizenInstance.Flags.HangAround) == CitizenInstance.Flags.None) || !success)
        {
            this.SetSource(instanceID, ref citizenData, 0);
            this.SetTarget(instanceID, ref citizenData, 0);
            citizenData.Unspawn(instanceID);
        }
    }

    protected virtual bool ArriveAtTarget(ushort instanceID, ref CitizenInstance citizenData)
    {
        if ((citizenData.m_flags & CitizenInstance.Flags.HangAround) != CitizenInstance.Flags.None)
        {
            uint citizen = citizenData.m_citizen;
            if (citizen != 0)
            {
                CitizenManager instance = Singleton<CitizenManager>.instance;
                if (instance.m_citizens.m_buffer[citizen].CurrentLocation == Citizen.Location.Moving)
                {
                    this.ArriveAtDestination(instanceID, ref citizenData, true);
                }
                if (instance.m_citizens.m_buffer[citizen].GetBuildingByLocation() == citizenData.m_targetBuilding)
                {
                    return false;
                }
            }
            citizenData.m_flags &= ~CitizenInstance.Flags.TargetFlags;
            citizenData.Unspawn(instanceID);
        }
        else
        {
            this.ArriveAtDestination(instanceID, ref citizenData, true);
        }
        return true;
    }

    protected override bool CheckLaneChange(ushort instanceID, ref CitizenInstance citizenData, PathUnit.Position prevPos, PathUnit.Position nextPos, int prevOffset, int nextOffset)
    {
        ushort startNode;
        NetManager instance = Singleton<NetManager>.instance;
        if (prevOffset == 0)
        {
            startNode = instance.m_segments.m_buffer[prevPos.m_segment].m_startNode;
        }
        else
        {
            startNode = instance.m_segments.m_buffer[prevPos.m_segment].m_endNode;
        }
        if ((instance.m_nodes.m_buffer[startNode].m_flags & NetNode.Flags.TrafficLights) != NetNode.Flags.None)
        {
            return this.CheckTrafficLights(startNode, prevPos.m_segment);
        }
        return true;
    }

    protected override bool CheckSegmentChange(ushort instanceID, ref CitizenInstance citizenData, PathUnit.Position prevPos, PathUnit.Position nextPos, int prevOffset, int nextOffset, Bezier3 bezier)
    {
        ushort startNode;
        ushort endNode;
        NetManager instance = Singleton<NetManager>.instance;
        if (prevOffset < 0x80)
        {
            startNode = instance.m_segments.m_buffer[prevPos.m_segment].m_startNode;
        }
        else
        {
            startNode = instance.m_segments.m_buffer[prevPos.m_segment].m_endNode;
        }
        if (nextOffset < 0x80)
        {
            endNode = instance.m_segments.m_buffer[nextPos.m_segment].m_startNode;
        }
        else
        {
            endNode = instance.m_segments.m_buffer[nextPos.m_segment].m_endNode;
        }
        if ((startNode == endNode) && ((instance.m_nodes.m_buffer[startNode].m_flags & NetNode.Flags.TrafficLights) != NetNode.Flags.None))
        {
            Segment3 segment4;
            Segment3 segment = new Segment3(bezier.a, bezier.b);
            Segment3 segment2 = new Segment3(bezier.b, bezier.c);
            Segment3 segment3 = new Segment3(bezier.c, bezier.d);
            segment4.a = instance.m_nodes.m_buffer[startNode].m_position;
            for (int i = 0; i < 8; i++)
            {
                ushort index = instance.m_nodes.m_buffer[startNode].GetSegment(i);
                if (((index != 0) && (index != prevPos.m_segment)) && (index != nextPos.m_segment))
                {
                    float num5;
                    float num6;
                    if (instance.m_segments.m_buffer[index].m_startNode == startNode)
                    {
                        segment4.b = segment4.a + ((Vector3)(instance.m_segments.m_buffer[index].m_startDirection * 1000f));
                    }
                    else
                    {
                        segment4.b = segment4.a + ((Vector3)(instance.m_segments.m_buffer[index].m_endDirection * 1000f));
                    }
                    if (((segment4.DistanceSqr(segment, out num5, out num6) < 1f) || (segment4.DistanceSqr(segment2, out num5, out num6) < 1f)) || (segment4.DistanceSqr(segment3, out num5, out num6) < 1f))
                    {
                        return this.CheckTrafficLights(startNode, index);
                    }
                }
            }
        }
        return true;
    }

    private bool CheckTrafficLights(ushort node, ushort segment)
    {
        RoadBaseAI.TrafficLightState state;
        RoadBaseAI.TrafficLightState state2;
        bool flag;
        bool flag2;
        NetManager instance = Singleton<NetManager>.instance;
        uint currentFrameIndex = Singleton<SimulationManager>.instance.m_currentFrameIndex;
        uint num2 = (uint)((node << 8) / 0x8000);
        uint num3 = (currentFrameIndex - num2) & 0xff;
        RoadBaseAI.GetTrafficLightState(node, ref instance.m_segments.m_buffer[segment], currentFrameIndex - num2, out state, out state2, out flag, out flag2);
        switch (state2)
        {
            case RoadBaseAI.TrafficLightState.IsChanging:
                if (num3 >= 60)
                {
                    break;
                }
                return false;

            case RoadBaseAI.TrafficLightState.Red:
            case RoadBaseAI.TrafficLightState.GreenToRed:
                if (!flag2 && (num3 >= 0xc4))
                {
                    flag2 = true;
                    RoadBaseAI.SetTrafficLightState(node, ref instance.m_segments.m_buffer[segment], currentFrameIndex - num2, state, state2, flag, flag2);
                }
                return false;
        }
        return true;
    }

    protected virtual bool EnterVehicle(ushort instanceID, ref CitizenInstance citizenData)
    {
        citizenData.m_flags &= ~CitizenInstance.Flags.EnteringVehicle;
        citizenData.Unspawn(instanceID);
        uint citizen = citizenData.m_citizen;
        if (citizen != 0)
        {
            VehicleManager instance = Singleton<VehicleManager>.instance;
            ushort vehicle = Singleton<CitizenManager>.instance.m_citizens.m_buffer[citizen].m_vehicle;
            if (vehicle != 0)
            {
                vehicle = instance.m_vehicles.m_buffer[vehicle].GetFirstVehicle(vehicle);
            }
            if (vehicle != 0)
            {
                VehicleInfo info = instance.m_vehicles.m_buffer[vehicle].Info;
                int ticketPrice = info.m_vehicleAI.GetTicketPrice(vehicle, ref instance.m_vehicles.m_buffer[vehicle]);
                if (ticketPrice != 0)
                {
                    Singleton<EconomyManager>.instance.AddResource(EconomyManager.Resource.PublicIncome, ticketPrice, info.m_class);
                }
            }
        }
        return false;
    }

    protected void FindVisitPlace(uint citizenID, ushort sourceBuilding, TransferManager.TransferReason reason)
    {
        TransferManager.TransferOffer offer = new TransferManager.TransferOffer
        {
            Priority = Singleton<SimulationManager>.instance.m_randomizer.Int32(8),
            Citizen = citizenID,
            Position = Singleton<BuildingManager>.instance.m_buildings.m_buffer[sourceBuilding].m_position,
            Amount = 1,
            Active = true
        };
        Singleton<TransferManager>.instance.AddIncomingOffer(reason, offer);
    }

    protected virtual void GetBuildingTargetPosition(ushort instanceID, ref CitizenInstance citizenData, float minSqrDistance)
    {
        if (citizenData.m_targetBuilding != 0)
        {
            BuildingManager instance = Singleton<BuildingManager>.instance;
            if (instance.m_buildings.m_buffer[citizenData.m_targetBuilding].m_fireIntensity != 0)
            {
                citizenData.m_flags |= CitizenInstance.Flags.Panicking;
                citizenData.m_targetDir = Vector2.zero;
            }
            else
            {
                Vector3 vector;
                Vector3 vector2;
                Vector2 vector3;
                CitizenInstance.Flags flags;
                BuildingInfo info = instance.m_buildings.m_buffer[citizenData.m_targetBuilding].Info;
                Randomizer randomizer = new Randomizer((instanceID << 8) | citizenData.m_targetSeed);
                info.m_buildingAI.CalculateUnspawnPosition(citizenData.m_targetBuilding, ref instance.m_buildings.m_buffer[citizenData.m_targetBuilding], ref randomizer, base.m_info, instanceID, out vector, out vector2, out vector3, out flags);
                citizenData.m_flags = (citizenData.m_flags & ~CitizenInstance.Flags.TargetFlags) | flags;
                citizenData.m_targetPos = new Vector4(vector.x, vector.y, vector.z, 1f);
                citizenData.m_targetDir = vector3;
            }
        }
        else
        {
            citizenData.m_flags &= ~CitizenInstance.Flags.TargetFlags;
            citizenData.m_targetDir = Vector2.zero;
        }
    }

    public override Color GetColor(ushort instanceID, ref CitizenInstance data, InfoManager.InfoMode infoMode)
    {
        if (infoMode != InfoManager.InfoMode.Transport)
        {
            return base.GetColor(instanceID, ref data, infoMode);
        }
        if ((data.m_path != 0) && ((data.m_flags & (CitizenInstance.Flags.EnteringVehicle | CitizenInstance.Flags.WaitingTransport)) != CitizenInstance.Flags.None))
        {
            PathUnit.Position position = Singleton<PathManager>.instance.m_pathUnits.m_buffer[data.m_path].GetPosition(data.m_pathPositionIndex >> 1);
            ushort startNode = Singleton<NetManager>.instance.m_segments.m_buffer[position.m_segment].m_startNode;
            ushort transportLine = Singleton<NetManager>.instance.m_nodes.m_buffer[startNode].m_transportLine;
            if (transportLine != 0)
            {
                return Singleton<TransportManager>.instance.m_lines.m_buffer[transportLine].GetColor();
            }
        }
        return Singleton<InfoManager>.instance.m_properties.m_neutralColor;
    }

    protected TransferManager.TransferReason GetLeavingReason(uint citizenID, ref Citizen data)
    {
        switch (data.WealthLevel)
        {
            case Citizen.Wealth.Low:
                return TransferManager.TransferReason.LeaveCity0;

            case Citizen.Wealth.Medium:
                return TransferManager.TransferReason.LeaveCity1;

            case Citizen.Wealth.High:
                return TransferManager.TransferReason.LeaveCity2;
        }
        return TransferManager.TransferReason.LeaveCity0;
    }

    private bool GetNextTargetPosition(ushort instanceID, ref CitizenInstance citizenData, Vector3 refPos, out Vector3 pos)
    {
        PathUnit.Position position;
        PathManager instance = Singleton<PathManager>.instance;
        NetManager manager2 = Singleton<NetManager>.instance;
        if ((citizenData.m_path != 0) && instance.m_pathUnits.m_buffer[citizenData.m_path].GetPosition(citizenData.m_pathPositionIndex >> 1, out position))
        {
            uint laneID = PathManager.GetLaneID(position);
            if (laneID != 0)
            {
                NetInfo info = manager2.m_segments.m_buffer[position.m_segment].Info;
                if (((info.m_lanes != null) && (info.m_lanes.Length > position.m_lane)) && (info.m_lanes[position.m_lane].m_laneType == (NetInfo.LaneType.None | NetInfo.LaneType.Pedestrian)))
                {
                    float num2;
                    manager2.m_lanes.m_buffer[laneID].GetClosestPosition(refPos, out pos, out num2);
                    return true;
                }
            }
            ushort startNode = manager2.m_segments.m_buffer[position.m_segment].m_startNode;
            Vector3 point = manager2.m_nodes.m_buffer[startNode].m_position;
            laneID = manager2.m_nodes.m_buffer[startNode].m_lane;
            if (laneID != 0)
            {
                int num5;
                float num6;
                uint segment = manager2.m_lanes.m_buffer[laneID].m_segment;
                if (manager2.m_segments.m_buffer[segment].GetClosestLanePosition(point, NetInfo.LaneType.None | NetInfo.LaneType.Pedestrian, VehicleInfo.VehicleType.None, out pos, out num5, out num6))
                {
                    return true;
                }
            }
            pos = point;
            return true;
        }
        pos = Vector3.zero;
        return false;
    }

    private Vector4 GetTransportWaitPosition(ushort instanceID, ref CitizenInstance citizenData, ref CitizenInstance.Frame frameData, float minSqrDistance)
    {
        PathUnit.Position position;
        NetInfo.Lane lane;
        Vector3 vector;
        Vector3 vector2;
        PathManager instance = Singleton<PathManager>.instance;
        NetManager manager2 = Singleton<NetManager>.instance;
        if (!instance.m_pathUnits.m_buffer[citizenData.m_path].GetPosition(citizenData.m_pathPositionIndex >> 1, out position))
        {
            base.InvalidPath(instanceID, ref citizenData);
            return citizenData.m_targetPos;
        }
        ushort startNode = manager2.m_segments.m_buffer[position.m_segment].m_startNode;
        if ((citizenData.m_flags & CitizenInstance.Flags.BoredOfWaiting) != CitizenInstance.Flags.None)
        {
            manager2.m_nodes.m_buffer[startNode].m_maxWaitTime = 0xff;
        }
        else if (citizenData.m_waitCounter > manager2.m_nodes.m_buffer[startNode].m_maxWaitTime)
        {
            manager2.m_nodes.m_buffer[startNode].m_maxWaitTime = citizenData.m_waitCounter;
        }
        uint index = manager2.m_nodes.m_buffer[startNode].m_lane;
        if (index == 0)
        {
            return citizenData.m_targetPos;
        }
        uint segment = manager2.m_lanes.m_buffer[index].m_segment;
        if (!manager2.m_segments.m_buffer[segment].GetClosestLane(index, NetInfo.LaneType.None | NetInfo.LaneType.Pedestrian, VehicleInfo.VehicleType.None, out index, out lane))
        {
            return citizenData.m_targetPos;
        }
        ushort num4 = manager2.m_segments.m_buffer[segment].m_startNode;
        ushort endNode = manager2.m_segments.m_buffer[segment].m_endNode;
        if (((manager2.m_nodes.m_buffer[num4].m_flags | manager2.m_nodes.m_buffer[endNode].m_flags) & NetNode.Flags.Disabled) != NetNode.Flags.None)
        {
            citizenData.m_waitCounter = 0xff;
        }
        Randomizer randomizer = new Randomizer(instanceID | (index << 0x10));
        float num6 = manager2.m_nodes.m_buffer[startNode].Info.m_netAI.MaxTransportWaitDistance();
        int num7 = manager2.m_nodes.m_buffer[startNode].m_laneOffset << 8;
        int num8 = Mathf.RoundToInt((num6 * 65280f) / Mathf.Max(1f, manager2.m_lanes.m_buffer[index].m_length));
        int min = Mathf.Clamp(num7 - num8, 0, 0xff00);
        int max = Mathf.Clamp(num7 + num8, 0, 0xff00);
        int num11 = randomizer.Int32(min, max);
        manager2.m_lanes.m_buffer[index].CalculatePositionAndDirection(num11 * 1.531863E-05f, out vector, out vector2);
        float num12 = (Mathf.Max((float)0f, (float)(lane.m_width - 1f)) * randomizer.Int32(-500, 500)) * 0.001f;
        vector += (Vector3)(Vector3.Cross(Vector3.up, vector2).normalized * num12);
        return new Vector4(vector.x, vector.y, vector.z, 0f);
    }

    protected virtual Vector4 GetVehicleEnterPosition(ushort instanceID, ref CitizenInstance citizenData, float minSqrDistance)
    {
        CitizenManager instance = Singleton<CitizenManager>.instance;
        VehicleManager manager2 = Singleton<VehicleManager>.instance;
        uint citizen = citizenData.m_citizen;
        if (citizen != 0)
        {
            ushort vehicle = instance.m_citizens.m_buffer[citizen].m_vehicle;
            if (vehicle != 0)
            {
                Vector4 closestDoorPosition = manager2.m_vehicles.m_buffer[vehicle].GetClosestDoorPosition((Vector3)citizenData.m_targetPos, VehicleInfo.DoorType.Enter);
                closestDoorPosition.w = citizenData.m_targetPos.w;
                return closestDoorPosition;
            }
        }
        return citizenData.m_targetPos;
    }

    protected virtual VehicleInfo GetVehicleInfo(ushort instanceID, ref CitizenInstance citizenData, bool forceProbability)
    {
        return null;
    }

    protected virtual void PathfindFailure(ushort instanceID, ref CitizenInstance data)
    {
        if (this.GetVehicleInfo(instanceID, ref data, false) != null)
        {
            bool flag = false;
            uint citizen = data.m_citizen;
            if (citizen != 0)
            {
                flag = (Singleton<CitizenManager>.instance.m_citizens.m_buffer[citizen].m_flags & Citizen.Flags.DummyTraffic) != Citizen.Flags.None;
            }
            BuildingManager instance = Singleton<BuildingManager>.instance;
            if (data.m_sourceBuilding != 0)
            {
                BuildingAI.PathFindType type = !flag ? BuildingAI.PathFindType.LeavingHuman : BuildingAI.PathFindType.LeavingDummy;
                instance.m_buildings.m_buffer[data.m_sourceBuilding].Info.m_buildingAI.PathfindFailure(data.m_sourceBuilding, ref instance.m_buildings.m_buffer[data.m_sourceBuilding], type);
            }
            if (data.m_targetBuilding != 0)
            {
                BuildingAI.PathFindType type2 = !flag ? BuildingAI.PathFindType.EnteringHuman : BuildingAI.PathFindType.EnteringDummy;
                instance.m_buildings.m_buffer[data.m_targetBuilding].Info.m_buildingAI.PathfindFailure(data.m_targetBuilding, ref instance.m_buildings.m_buffer[data.m_targetBuilding], type2);
            }
        }
        this.ArriveAtDestination(instanceID, ref data, false);
        Singleton<CitizenManager>.instance.ReleaseCitizenInstance(instanceID);
    }

    protected virtual void PathfindSuccess(ushort instanceID, ref CitizenInstance data)
    {
        bool flag = false;
        uint citizen = data.m_citizen;
        if (citizen != 0)
        {
            CitizenManager manager = Singleton<CitizenManager>.instance;
            flag = (manager.m_citizens.m_buffer[citizen].m_flags & Citizen.Flags.DummyTraffic) != Citizen.Flags.None;
            manager.m_citizens.m_buffer[citizen].m_flags &= ~Citizen.Flags.MovingIn;
        }
        BuildingManager instance = Singleton<BuildingManager>.instance;
        if (data.m_sourceBuilding != 0)
        {
            BuildingAI.PathFindType type = !flag ? BuildingAI.PathFindType.LeavingHuman : BuildingAI.PathFindType.LeavingDummy;
            instance.m_buildings.m_buffer[data.m_sourceBuilding].Info.m_buildingAI.PathfindSuccess(data.m_sourceBuilding, ref instance.m_buildings.m_buffer[data.m_sourceBuilding], type);
        }
        if (data.m_targetBuilding != 0)
        {
            BuildingAI.PathFindType type2 = !flag ? BuildingAI.PathFindType.EnteringHuman : BuildingAI.PathFindType.EnteringDummy;
            instance.m_buildings.m_buffer[data.m_targetBuilding].Info.m_buildingAI.PathfindSuccess(data.m_targetBuilding, ref instance.m_buildings.m_buffer[data.m_targetBuilding], type2);
        }
    }

    public override bool SetCurrentVehicle(ushort instanceID, ref CitizenInstance citizenData, ushort vehicleID, uint unitID, Vector3 position)
    {
        uint citizen = citizenData.m_citizen;
        if ((citizenData.m_flags & CitizenInstance.Flags.WaitingTransport) != CitizenInstance.Flags.None)
        {
            if ((vehicleID == 0) && (unitID == 0))
            {
                return true;
            }
            CitizenManager manager = Singleton<CitizenManager>.instance;
            if (citizen != 0)
            {
                manager.m_citizens.m_buffer[citizen].SetVehicle(citizen, vehicleID, unitID);
                if (manager.m_citizens.m_buffer[citizen].m_vehicle != 0)
                {
                    citizenData.m_flags &= ~CitizenInstance.Flags.WaitingTransport;
                    citizenData.m_flags |= CitizenInstance.Flags.EnteringVehicle;
                    return true;
                }
                return false;
            }
            citizenData.m_flags &= ~CitizenInstance.Flags.WaitingTransport;
            citizenData.m_flags |= CitizenInstance.Flags.EnteringVehicle;
            return false;
        }
        if (vehicleID != 0)
        {
            return false;
        }
        CitizenManager instance = Singleton<CitizenManager>.instance;
        ushort index = 0;
        if (citizen != 0)
        {
            index = instance.m_citizens.m_buffer[citizen].m_vehicle;
            instance.m_citizens.m_buffer[citizen].SetVehicle(citizen, 0, 0);
        }
        if (index != 0)
        {
            Vector3 vector;
            if (this.GetNextTargetPosition(instanceID, ref citizenData, Singleton<VehicleManager>.instance.m_vehicles.m_buffer[index].GetLastFramePosition(), out vector))
            {
                position = Singleton<VehicleManager>.instance.m_vehicles.m_buffer[index].GetClosestDoorPosition(vector, VehicleInfo.DoorType.Exit);
            }
            else
            {
                Randomizer r = new Randomizer(instanceID ^ index);
                position = Singleton<VehicleManager>.instance.m_vehicles.m_buffer[index].GetRandomDoorPosition(ref r, VehicleInfo.DoorType.Exit);
            }
        }
        citizenData.Unspawn(instanceID);
        citizenData.m_targetPos = position;
        citizenData.m_frame0.m_velocity = Vector3.zero;
        citizenData.m_frame0.m_position = position;
        citizenData.m_frame0.m_rotation = Quaternion.identity;
        citizenData.m_frame1 = citizenData.m_frame0;
        citizenData.m_frame2 = citizenData.m_frame0;
        citizenData.m_frame3 = citizenData.m_frame0;
        if ((citizenData.m_path != 0) && ((citizenData.m_flags & CitizenInstance.Flags.WaitingPath) == CitizenInstance.Flags.None))
        {
            if (Singleton<PathManager>.instance.m_pathUnits.m_buffer[citizenData.m_path].CalculatePathPositionOffset((int)(citizenData.m_pathPositionIndex >> 1), position, out citizenData.m_lastPathOffset))
            {
                this.Spawn(instanceID, ref citizenData);
            }
        }
        else if (this.StartPathFind(instanceID, ref citizenData))
        {
            this.Spawn(instanceID, ref citizenData);
        }
        return true;
    }

    public override void SimulationStep(ushort instanceID, ref CitizenInstance data, Vector3 physicsLodRefPos)
    {
        if ((data.m_flags & CitizenInstance.Flags.WaitingPath) != CitizenInstance.Flags.None)
        {
            byte pathFindFlags = Singleton<PathManager>.instance.m_pathUnits.m_buffer[data.m_path].m_pathFindFlags;
            if ((pathFindFlags & 4) != 0)
            {
                this.Spawn(instanceID, ref data);
                data.m_pathPositionIndex = 0xff;
                data.m_flags &= ~CitizenInstance.Flags.WaitingPath;
                this.PathfindSuccess(instanceID, ref data);
            }
            else if ((pathFindFlags & 8) != 0)
            {
                data.m_flags &= ~CitizenInstance.Flags.WaitingPath;
                data.m_flags &= ~CitizenInstance.Flags.TargetFlags;
                Singleton<PathManager>.instance.ReleasePath(data.m_path);
                data.m_path = 0;
                this.PathfindFailure(instanceID, ref data);
                return;
            }
        }
        base.SimulationStep(instanceID, ref data, physicsLodRefPos);
        if ((data.m_flags & (CitizenInstance.Flags.WaitingPath | CitizenInstance.Flags.Character)) == CitizenInstance.Flags.None)
        {
            CitizenManager instance = Singleton<CitizenManager>.instance;
            if ((data.m_citizen == 0) || (instance.m_citizens.m_buffer[data.m_citizen].m_vehicle == 0))
            {
                data.m_flags &= ~CitizenInstance.Flags.TargetFlags;
                this.ArriveAtDestination(instanceID, ref data, false);
                Singleton<CitizenManager>.instance.ReleaseCitizenInstance(instanceID);
            }
        }
    }

    public override void SimulationStep(ushort instanceID, ref CitizenInstance citizenData, ref CitizenInstance.Frame frameData, bool lodPhysics)
    {
        float num2;
        uint currentFrameIndex = Singleton<SimulationManager>.instance.m_currentFrameIndex;
        Vector3 v = ((Vector3)citizenData.m_targetPos) - frameData.m_position;
        if (!lodPhysics && (citizenData.m_targetPos.w > 0.001f))
        {
            num2 = VectorUtils.LengthSqrXZ(v);
        }
        else
        {
            num2 = v.sqrMagnitude;
        }
        float sqrMagnitude = frameData.m_velocity.sqrMagnitude;
        float minSqrDistance = Mathf.Max((float)(sqrMagnitude * 3f), (float)3f);
        if (lodPhysics && (((currentFrameIndex >> 4) & 3) == (instanceID & 3)))
        {
            minSqrDistance *= 4f;
        }
        bool flag = false;
        if ((citizenData.m_flags & CitizenInstance.Flags.TryingSpawnVehicle) != CitizenInstance.Flags.None)
        {
            bool flag2 = true;
            if (((citizenData.m_waitCounter = (byte)(citizenData.m_waitCounter + 1)) == 0xff) || (citizenData.m_path == 0))
            {
                flag2 = false;
            }
            if (flag2)
            {
                PathUnit.Position position;
                flag2 = Singleton<PathManager>.instance.m_pathUnits.m_buffer[citizenData.m_path].GetPosition(citizenData.m_pathPositionIndex >> 1, out position);
                if (flag2)
                {
                    flag2 = this.SpawnVehicle(instanceID, ref citizenData, position);
                }
            }
            if (!flag2)
            {
                citizenData.m_flags &= ~CitizenInstance.Flags.TryingSpawnVehicle;
                citizenData.m_flags &= ~CitizenInstance.Flags.BoredOfWaiting;
                citizenData.m_waitCounter = 0;
                base.InvalidPath(instanceID, ref citizenData);
            }
        }
        else if ((citizenData.m_flags & CitizenInstance.Flags.WaitingTransport) != CitizenInstance.Flags.None)
        {
            bool flag3 = true;
            if (citizenData.m_waitCounter < 0xff)
            {
                if (Singleton<SimulationManager>.instance.m_randomizer.Int32(4) == 0)
                {
                    citizenData.m_waitCounter = (byte)(citizenData.m_waitCounter + 1);
                }
            }
            else if ((citizenData.m_flags & CitizenInstance.Flags.BoredOfWaiting) == CitizenInstance.Flags.None)
            {
                citizenData.m_flags |= CitizenInstance.Flags.BoredOfWaiting;
                citizenData.m_waitCounter = 0;
            }
            else
            {
                citizenData.m_flags &= ~CitizenInstance.Flags.WaitingTransport;
                citizenData.m_flags &= ~CitizenInstance.Flags.BoredOfWaiting;
                citizenData.m_flags |= CitizenInstance.Flags.CannotUseTransport;
                citizenData.m_waitCounter = 0;
                flag3 = false;
                base.InvalidPath(instanceID, ref citizenData);
            }
            if (flag3 && (num2 < minSqrDistance))
            {
                if (((currentFrameIndex >> 4) & 7) == (instanceID & 7))
                {
                    citizenData.m_targetPos = this.GetTransportWaitPosition(instanceID, ref citizenData, ref frameData, minSqrDistance);
                }
                v = ((Vector3)citizenData.m_targetPos) - frameData.m_position;
                if (!lodPhysics && (citizenData.m_targetPos.w > 0.001f))
                {
                    num2 = VectorUtils.LengthSqrXZ(v);
                }
                else
                {
                    num2 = v.sqrMagnitude;
                }
            }
        }
        else if ((citizenData.m_flags & CitizenInstance.Flags.EnteringVehicle) != CitizenInstance.Flags.None)
        {
            if (num2 < minSqrDistance)
            {
                citizenData.m_targetPos = this.GetVehicleEnterPosition(instanceID, ref citizenData, minSqrDistance);
                v = ((Vector3)citizenData.m_targetPos) - frameData.m_position;
                if (!lodPhysics && (citizenData.m_targetPos.w > 0.001f))
                {
                    num2 = VectorUtils.LengthSqrXZ(v);
                }
                else
                {
                    num2 = v.sqrMagnitude;
                }
            }
        }
        else if (num2 < minSqrDistance)
        {
            if (citizenData.m_path != 0)
            {
                if ((citizenData.m_flags & CitizenInstance.Flags.WaitingPath) == CitizenInstance.Flags.None)
                {
                    citizenData.m_targetPos = base.GetPathTargetPosition(instanceID, ref citizenData, ref frameData, minSqrDistance);
                    if ((citizenData.m_flags & CitizenInstance.Flags.OnPath) == CitizenInstance.Flags.None)
                    {
                        citizenData.m_targetPos.w = 1f;
                    }
                }
            }
            else
            {
                citizenData.m_flags &= ~CitizenInstance.Flags.OnPath;
                if ((citizenData.m_targetBuilding != 0) && (((citizenData.m_flags & CitizenInstance.Flags.AtTarget) == CitizenInstance.Flags.None) || (((currentFrameIndex >> 4) & 15) == (instanceID & 15))))
                {
                    this.GetBuildingTargetPosition(instanceID, ref citizenData, minSqrDistance);
                }
                if ((citizenData.m_flags & CitizenInstance.Flags.Panicking) == CitizenInstance.Flags.None)
                {
                    flag = true;
                }
            }
            v = ((Vector3)citizenData.m_targetPos) - frameData.m_position;
            if (!lodPhysics && (citizenData.m_targetPos.w > 0.001f))
            {
                num2 = VectorUtils.LengthSqrXZ(v);
            }
            else
            {
                num2 = v.sqrMagnitude;
            }
        }
        float walkSpeed = base.m_info.m_walkSpeed;
        float b = 2f;
        if ((citizenData.m_flags & CitizenInstance.Flags.HangAround) != CitizenInstance.Flags.None)
        {
            walkSpeed = Mathf.Max((float)(walkSpeed * 0.5f), (float)1f);
        }
        if (sqrMagnitude > 0.01f)
        {
            frameData.m_position += (Vector3)(frameData.m_velocity * 0.5f);
        }
        if (num2 < 1f)
        {
            v = Vector3.zero;
            if ((citizenData.m_flags & CitizenInstance.Flags.EnteringVehicle) != CitizenInstance.Flags.None)
            {
                if (this.EnterVehicle(instanceID, ref citizenData))
                {
                    return;
                }
            }
            else if (flag)
            {
                if (this.ArriveAtTarget(instanceID, ref citizenData))
                {
                    return;
                }
                citizenData.m_flags |= CitizenInstance.Flags.AtTarget;
                if (Singleton<SimulationManager>.instance.m_randomizer.Int32(0x100) == 0)
                {
                    citizenData.m_targetSeed = (byte)Singleton<SimulationManager>.instance.m_randomizer.Int32(0x100);
                }
            }
            else
            {
                citizenData.m_flags &= ~CitizenInstance.Flags.AtTarget;
            }
        }
        else
        {
            float num7 = Mathf.Sqrt(num2);
            float num8 = Mathf.Sqrt(sqrMagnitude);
            float num9 = Mathf.Max((float)0f, (float)(Vector3.Dot(v, frameData.m_velocity) / Mathf.Max((float)1f, (float)(num8 * num7))));
            walkSpeed = Mathf.Max((float)0.5f, (float)(((walkSpeed * num9) * num9) * num9));
            v = (Vector3)(v * Mathf.Min((float)0.577f, (float)(walkSpeed / num7)));
            citizenData.m_flags &= ~CitizenInstance.Flags.AtTarget;
            if (((citizenData.m_flags & CitizenInstance.Flags.RequireSlowStart) != CitizenInstance.Flags.None) && (citizenData.m_waitCounter < 8))
            {
                citizenData.m_waitCounter = (byte)(citizenData.m_waitCounter + 1);
                frameData.m_velocity = Vector3.zero;
                return;
            }
        }
        frameData.m_underground = (citizenData.m_flags & CitizenInstance.Flags.Underground) != CitizenInstance.Flags.None;
        frameData.m_insideBuilding = (citizenData.m_flags & CitizenInstance.Flags.InsideBuilding) != CitizenInstance.Flags.None;
        if (((num2 < 1f) && flag) && ((citizenData.m_flags & CitizenInstance.Flags.SittingDown) != CitizenInstance.Flags.None))
        {
            citizenData.m_flags |= CitizenInstance.Flags.RequireSlowStart;
            citizenData.m_waitCounter = 0;
            frameData.m_velocity = (Vector3)(((Vector3)citizenData.m_targetPos - frameData.m_position) * 0.5f);
            frameData.m_position += (Vector3)(frameData.m_velocity * 0.5f);
            if (citizenData.m_targetDir.sqrMagnitude > 0.01f)
            {
                frameData.m_rotation = Quaternion.LookRotation(VectorUtils.X_Y(citizenData.m_targetDir));
            }
        }
        else
        {
            ushort walkingBuilding;
            citizenData.m_flags &= ~CitizenInstance.Flags.RequireSlowStart;
            Vector3 vector2 = v - frameData.m_velocity;
            float magnitude = vector2.magnitude;
            vector2 = (Vector3)(vector2 * (b / Mathf.Max(magnitude, b)));
            frameData.m_velocity += vector2;
            float f = frameData.m_velocity.sqrMagnitude;
            bool flag4 = (!lodPhysics && (citizenData.m_targetPos.w > 0.001f)) && ((f > 0.01f) || (sqrMagnitude > 0.01f));
            if (flag4)
            {
                Vector3 worldPos = frameData.m_position + ((Vector3)(frameData.m_velocity * 0.5f));
                walkingBuilding = Singleton<BuildingManager>.instance.GetWalkingBuilding(worldPos);
            }
            else
            {
                walkingBuilding = 0;
            }
            if (f > 0.01f)
            {
                if (!lodPhysics)
                {
                    Vector3 zero = Vector3.zero;
                    float pushDivider = 0f;
                    base.CheckCollisions(instanceID, ref citizenData, frameData.m_position, frameData.m_position + frameData.m_velocity, walkingBuilding, ref zero, ref pushDivider);
                    if (pushDivider > 0.01f)
                    {
                        zero = (Vector3)(zero * (1f / pushDivider));
                        zero = Vector3.ClampMagnitude(zero, Mathf.Sqrt(f) * 0.9f);
                        frameData.m_velocity += zero;
                    }
                }
                frameData.m_position += (Vector3)(frameData.m_velocity * 0.5f);
                Vector3 velocity = frameData.m_velocity;
                velocity.y = 0f;
                if (velocity.sqrMagnitude > 0.01f)
                {
                    frameData.m_rotation = Quaternion.LookRotation(velocity);
                }
            }
            if (flag4)
            {
                Vector3 vector6 = frameData.m_position;
                float terrainHeight = Singleton<TerrainManager>.instance.SampleDetailHeight(vector6);
                if (walkingBuilding != 0)
                {
                    terrainHeight = Singleton<BuildingManager>.instance.m_buildings.m_buffer[walkingBuilding].SampleWalkingHeight(vector6, terrainHeight);
                    vector6.y += (terrainHeight - vector6.y) * Mathf.Min((float)1f, (float)(citizenData.m_targetPos.w * 4f));
                    frameData.m_position.y = vector6.y;
                }
                else if (Mathf.Abs((float)(terrainHeight - vector6.y)) < 2f)
                {
                    vector6.y += (terrainHeight - vector6.y) * Mathf.Min((float)1f, (float)(citizenData.m_targetPos.w * 4f));
                    frameData.m_position.y = vector6.y;
                }
            }
        }
    }

    protected virtual void Spawn(ushort instanceID, ref CitizenInstance data)
    {
        data.Spawn(instanceID);
    }

    protected bool StartMoving(uint citizenID, ref Citizen data, ushort sourceBuilding, ushort targetBuilding)
    {
        CitizenManager instance = Singleton<CitizenManager>.instance;
        if (targetBuilding != sourceBuilding)
        {
            ushort num;
            if ((targetBuilding == 0) || ((Singleton<BuildingManager>.instance.m_buildings.m_buffer[targetBuilding].m_flags & Building.Flags.Active) == Building.Flags.None))
            {
                return false;
            }
            if (data.m_instance != 0)
            {
                base.m_info.m_citizenAI.SetTarget(data.m_instance, ref instance.m_instances.m_buffer[data.m_instance], targetBuilding);
                data.CurrentLocation = Citizen.Location.Moving;
                return true;
            }
            if (sourceBuilding == 0)
            {
                sourceBuilding = data.GetBuildingByLocation();
                if (sourceBuilding == 0)
                {
                    return false;
                }
            }
            if (instance.CreateCitizenInstance(out num, ref Singleton<SimulationManager>.instance.m_randomizer, base.m_info, citizenID))
            {
                base.m_info.m_citizenAI.SetSource(num, ref instance.m_instances.m_buffer[num], sourceBuilding);
                base.m_info.m_citizenAI.SetTarget(num, ref instance.m_instances.m_buffer[num], targetBuilding);
                data.CurrentLocation = Citizen.Location.Moving;
                return true;
            }
        }
        return false;
    }

    public override bool TransportArriveAtSource(ushort instanceID, ref CitizenInstance citizenData, Vector3 currentPos, Vector3 nextTarget)
    {
        PathUnit.Position position;
        PathManager instance = Singleton<PathManager>.instance;
        NetManager manager2 = Singleton<NetManager>.instance;
        if ((citizenData.m_path != 0) && instance.m_pathUnits.m_buffer[citizenData.m_path].GetPosition(citizenData.m_pathPositionIndex >> 1, out position))
        {
            uint laneID = PathManager.GetLaneID(position);
            Vector3 vector = manager2.m_lanes.m_buffer[laneID].CalculatePosition((citizenData.m_lastPathOffset < 0x80) ? 1f : 0f);
            Vector3 vector2 = manager2.m_lanes.m_buffer[laneID].CalculatePosition(citizenData.m_lastPathOffset * 0.003921569f);
            float num2 = Vector3.SqrMagnitude(vector - currentPos);
            float num3 = Vector3.SqrMagnitude(vector2 - nextTarget);
            if ((num2 < 4f) && (num3 < 4f))
            {
                return true;
            }
        }
        return false;
    }

    public override bool TransportArriveAtTarget(ushort instanceID, ref CitizenInstance citizenData, Vector3 currentPos, Vector3 nextTarget, ref TransportPassengerData passengerData, bool forceUnload)
    {
        PathManager instance = Singleton<PathManager>.instance;
        NetManager manager2 = Singleton<NetManager>.instance;
        CitizenManager manager3 = Singleton<CitizenManager>.instance;
        ushort index = 0;
        bool flag = false;
        if (citizenData.m_path != 0)
        {
            PathUnit.Position position;
            if (instance.m_pathUnits.m_buffer[citizenData.m_path].GetPosition(citizenData.m_pathPositionIndex >> 1, out position))
            {
                uint laneID = PathManager.GetLaneID(position);
                if (Vector3.SqrMagnitude(manager2.m_lanes.m_buffer[laneID].CalculatePosition(position.m_offset * 0.003921569f) - currentPos) >= 4f)
                {
                    flag = true;
                }
                index = manager2.m_segments.m_buffer[position.m_segment].m_endNode;
            }
            else
            {
                flag = true;
            }
        }
        if (citizenData.m_path != 0)
        {
            citizenData.m_pathPositionIndex = (byte)(citizenData.m_pathPositionIndex + 2);
            if ((citizenData.m_pathPositionIndex >> 1) >= instance.m_pathUnits.m_buffer[citizenData.m_path].m_positionCount)
            {
                instance.ReleaseFirstUnit(ref citizenData.m_path);
                citizenData.m_pathPositionIndex = 0;
            }
        }
        if (citizenData.m_path != 0)
        {
            PathUnit.Position position2;
            if (instance.m_pathUnits.m_buffer[citizenData.m_path].GetPosition(citizenData.m_pathPositionIndex >> 1, out position2))
            {
                citizenData.m_lastPathOffset = position2.m_offset;
                uint num4 = PathManager.GetLaneID(position2);
                if (Vector3.SqrMagnitude(manager2.m_lanes.m_buffer[num4].CalculatePosition(citizenData.m_lastPathOffset * 0.003921569f) - nextTarget) < 4f)
                {
                    if (!forceUnload)
                    {
                        return false;
                    }
                    flag = true;
                }
                else if (manager2.m_nodes.m_buffer[index].m_lane != num4)
                {
                    flag = true;
                }
            }
            else
            {
                flag = true;
            }
        }
        citizenData.m_targetPos = currentPos;
        uint citizen = citizenData.m_citizen;
        if (citizen != 0)
        {
            if ((manager3.m_citizens.m_buffer[citizen].m_flags & Citizen.Flags.Tourist) != Citizen.Flags.None)
            {
                passengerData.m_touristPassengers.m_tempCount++;
            }
            else
            {
                passengerData.m_residentPassengers.m_tempCount++;
            }
            if (this.GetVehicleInfo(instanceID, ref citizenData, false) != null)
            {
                passengerData.m_carOwningPassengers.m_tempCount++;
            }
            switch (Citizen.GetAgeGroup(manager3.m_citizens.m_buffer[citizen].Age))
            {
                case Citizen.AgeGroup.Child:
                    passengerData.m_childPassengers.m_tempCount++;
                    break;

                case Citizen.AgeGroup.Teen:
                    passengerData.m_teenPassengers.m_tempCount++;
                    break;

                case Citizen.AgeGroup.Young:
                    passengerData.m_youngPassengers.m_tempCount++;
                    break;

                case Citizen.AgeGroup.Adult:
                    passengerData.m_adultPassengers.m_tempCount++;
                    break;

                case Citizen.AgeGroup.Senior:
                    passengerData.m_seniorPassengers.m_tempCount++;
                    break;
            }
        }
        if (flag && (citizenData.m_path != 0))
        {
            Singleton<PathManager>.instance.ReleasePath(citizenData.m_path);
            citizenData.m_path = 0;
        }
        return true;
    }
}
