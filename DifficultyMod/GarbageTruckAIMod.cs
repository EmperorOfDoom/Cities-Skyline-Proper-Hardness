// Generated by .NET Reflector from C:\Projects\Skylines\DifficultyMod\DifficultyMod\libs\Assembly-CSharp.dll
using ColossalFramework;
using ColossalFramework.Globalization;
using ColossalFramework.Math;
using System;
using System.Runtime.InteropServices;
using UnityEngine;

public class GarbageTruckAIMod : CarAIMod
{
    public int m_cargoCapacity = 1;

    public override bool ArriveAtDestination(ushort vehicleID, ref Vehicle vehicleData)
    {
        if ((vehicleData.m_flags & Vehicle.Flags.WaitingTarget) != Vehicle.Flags.None)
        {
            return false;
        }
        if ((vehicleData.m_flags & Vehicle.Flags.GoingBack) != Vehicle.Flags.None)
        {
            return this.ArriveAtSource(vehicleID, ref vehicleData);
        }
        return this.ArriveAtTarget(vehicleID, ref vehicleData);
    }

    private bool ArriveAtSource(ushort vehicleID, ref Vehicle data)
    {
        if (data.m_sourceBuilding == 0)
        {
            Singleton<VehicleManager>.instance.ReleaseVehicle(vehicleID);
            return true;
        }
        int amountDelta = 0;
        if ((data.m_flags & Vehicle.Flags.TransferToSource) != Vehicle.Flags.None)
        {
            amountDelta = data.m_transferSize;
            Singleton<BuildingManager>.instance.m_buildings.m_buffer[data.m_sourceBuilding].Info.m_buildingAI.ModifyMaterialBuffer(data.m_sourceBuilding, ref Singleton<BuildingManager>.instance.m_buildings.m_buffer[data.m_sourceBuilding], (TransferManager.TransferReason)data.m_transferType, ref amountDelta);
            data.m_transferSize = (ushort)Mathf.Clamp(data.m_transferSize - amountDelta, 0, data.m_transferSize);
        }
        this.RemoveSource(vehicleID, ref data);
        Singleton<VehicleManager>.instance.ReleaseVehicle(vehicleID);
        return true;
    }

    private bool ArriveAtTarget(ushort vehicleID, ref Vehicle data)
    {
        if (data.m_targetBuilding == 0)
        {
            return true;
        }
        int amountDelta = 0;
        if ((data.m_flags & Vehicle.Flags.TransferToTarget) != Vehicle.Flags.None)
        {
            amountDelta = data.m_transferSize;
        }
        if ((data.m_flags & Vehicle.Flags.TransferToSource) != Vehicle.Flags.None)
        {
            amountDelta = Mathf.Min(0, data.m_transferSize - this.m_cargoCapacity);
        }
        BuildingManager instance = Singleton<BuildingManager>.instance;
        instance.m_buildings.m_buffer[data.m_targetBuilding].Info.m_buildingAI.ModifyMaterialBuffer(data.m_targetBuilding, ref instance.m_buildings.m_buffer[data.m_targetBuilding], (TransferManager.TransferReason)data.m_transferType, ref amountDelta);
        if ((data.m_flags & Vehicle.Flags.TransferToTarget) != Vehicle.Flags.None)
        {
            data.m_transferSize = (ushort)Mathf.Clamp(data.m_transferSize - amountDelta, 0, data.m_transferSize);
        }
        if ((data.m_flags & Vehicle.Flags.TransferToSource) != Vehicle.Flags.None)
        {
            data.m_transferSize = (ushort)(data.m_transferSize + ((ushort)Mathf.Max(0, -amountDelta)));
        }
        this.SetTarget(vehicleID, ref data, 0);
        return false;
    }

    public override void BuildingRelocated(ushort vehicleID, ref Vehicle data, ushort building)
    {
        base.BuildingRelocated(vehicleID, ref data, building);
        if (building == data.m_sourceBuilding)
        {
            if ((data.m_flags & Vehicle.Flags.GoingBack) != Vehicle.Flags.None)
            {
                this.InvalidPath(vehicleID, ref data, vehicleID, ref data);
            }
        }
        else if ((building == data.m_targetBuilding) && ((data.m_flags & Vehicle.Flags.GoingBack) == Vehicle.Flags.None))
        {
            this.InvalidPath(vehicleID, ref data, vehicleID, ref data);
        }
    }

    public override void CreateVehicle(ushort vehicleID, ref Vehicle data)
    {
        base.CreateVehicle(vehicleID, ref data);
        data.m_flags |= Vehicle.Flags.WaitingTarget;
    }

    public override void GetBufferStatus(ushort vehicleID, ref Vehicle data, out string localeKey, out int current, out int max)
    {
        localeKey = "Default";
        current = data.m_transferSize;
        max = this.m_cargoCapacity;
    }

    public override Color GetColor(ushort vehicleID, ref Vehicle data, InfoManager.InfoMode infoMode)
    {
        if (infoMode == InfoManager.InfoMode.Garbage)
        {
            return Singleton<InfoManager>.instance.m_properties.m_modeProperties[(int)infoMode].m_activeColor;
        }
        return base.GetColor(vehicleID, ref data, infoMode);
    }

    public override string GetLocalizedStatus(ushort vehicleID, ref Vehicle data, out InstanceID target)
    {
        if ((data.m_flags & Vehicle.Flags.TransferToSource) != Vehicle.Flags.None)
        {
            if ((data.m_flags & Vehicle.Flags.GoingBack) != Vehicle.Flags.None)
            {
                target = InstanceID.Empty;
                return Locale.Get("VEHICLE_STATUS_GARBAGE_RETURN");
            }
            if ((data.m_flags & Vehicle.Flags.WaitingTarget) != Vehicle.Flags.None)
            {
                target = InstanceID.Empty;
                return Locale.Get("VEHICLE_STATUS_GARBAGE_WAIT");
            }
            target = InstanceID.Empty;
            return Locale.Get("VEHICLE_STATUS_GARBAGE_COLLECT");
        }
        if ((data.m_flags & Vehicle.Flags.TransferToTarget) != Vehicle.Flags.None)
        {
            if ((data.m_flags & Vehicle.Flags.GoingBack) != Vehicle.Flags.None)
            {
                target = InstanceID.Empty;
                return Locale.Get("VEHICLE_STATUS_GARBAGE_RETURN");
            }
            if ((data.m_flags & Vehicle.Flags.WaitingTarget) != Vehicle.Flags.None)
            {
                target = InstanceID.Empty;
                return Locale.Get("VEHICLE_STATUS_GARBAGE_UNLOAD");
            }
            if (data.m_targetBuilding != 0)
            {
                target = InstanceID.Empty;
                target.Building = data.m_targetBuilding;
                return Locale.Get("VEHICLE_STATUS_GARBAGE_TRANSFER");
            }
        }
        target = InstanceID.Empty;
        return Locale.Get("VEHICLE_STATUS_CONFUSED");
    }

    public override void GetSize(ushort vehicleID, ref Vehicle data, out int size, out int max)
    {
        size = data.m_transferSize;
        max = this.m_cargoCapacity;
    }

    public override InstanceID GetTargetID(ushort vehicleID, ref Vehicle vehicleData)
    {
        InstanceID eid = new InstanceID();
        if ((vehicleData.m_flags & Vehicle.Flags.GoingBack) != Vehicle.Flags.None)
        {
            eid.Building = vehicleData.m_sourceBuilding;
            return eid;
        }
        eid.Building = vehicleData.m_targetBuilding;
        return eid;
    }

    public override void LoadVehicle(ushort vehicleID, ref Vehicle data)
    {
        base.LoadVehicle(vehicleID, ref data);
        if (data.m_sourceBuilding != 0)
        {
            Singleton<BuildingManager>.instance.m_buildings.m_buffer[data.m_sourceBuilding].AddOwnVehicle(vehicleID, ref data);
        }
        if (data.m_targetBuilding != 0)
        {
            Singleton<BuildingManager>.instance.m_buildings.m_buffer[data.m_targetBuilding].AddGuestVehicle(vehicleID, ref data);
        }
    }

    public override void ReleaseVehicle(ushort vehicleID, ref Vehicle data)
    {
        if ((data.m_sourceBuilding != 0) && (data.m_transferSize != 0))
        {
            int transferSize = data.m_transferSize;
            Singleton<BuildingManager>.instance.m_buildings.m_buffer[data.m_sourceBuilding].Info.m_buildingAI.ModifyMaterialBuffer(data.m_sourceBuilding, ref Singleton<BuildingManager>.instance.m_buildings.m_buffer[data.m_sourceBuilding], (TransferManager.TransferReason)data.m_transferType, ref transferSize);
            data.m_transferSize = (ushort)Mathf.Clamp(data.m_transferSize - transferSize, 0, data.m_transferSize);
        }
        this.RemoveOffers(vehicleID, ref data);
        this.RemoveSource(vehicleID, ref data);
        this.RemoveTarget(vehicleID, ref data);
        base.ReleaseVehicle(vehicleID, ref data);
    }

    private void RemoveOffers(ushort vehicleID, ref Vehicle data)
    {
        if ((data.m_flags & Vehicle.Flags.WaitingTarget) != Vehicle.Flags.None)
        {
            TransferManager.TransferOffer offer = new TransferManager.TransferOffer
            {
                Vehicle = vehicleID
            };
            if ((data.m_flags & Vehicle.Flags.TransferToSource) != Vehicle.Flags.None)
            {
                Singleton<TransferManager>.instance.RemoveIncomingOffer((TransferManager.TransferReason)data.m_transferType, offer);
            }
            else if ((data.m_flags & Vehicle.Flags.TransferToTarget) != Vehicle.Flags.None)
            {
                Singleton<TransferManager>.instance.RemoveOutgoingOffer((TransferManager.TransferReason)data.m_transferType, offer);
            }
        }
    }

    private void RemoveSource(ushort vehicleID, ref Vehicle data)
    {
        if (data.m_sourceBuilding != 0)
        {
            Singleton<BuildingManager>.instance.m_buildings.m_buffer[data.m_sourceBuilding].RemoveOwnVehicle(vehicleID, ref data);
            data.m_sourceBuilding = 0;
        }
    }

    private void RemoveTarget(ushort vehicleID, ref Vehicle data)
    {
        if (data.m_targetBuilding != 0)
        {
            Singleton<BuildingManager>.instance.m_buildings.m_buffer[data.m_targetBuilding].RemoveGuestVehicle(vehicleID, ref data);
            data.m_targetBuilding = 0;
        }
    }

    public override void SetSource(ushort vehicleID, ref Vehicle data, ushort sourceBuilding)
    {
        this.RemoveSource(vehicleID, ref data);
        data.m_sourceBuilding = sourceBuilding;
        if (sourceBuilding != 0)
        {
            Vector3 vector;
            Vector3 vector2;
            BuildingManager instance = Singleton<BuildingManager>.instance;
            BuildingInfo info = instance.m_buildings.m_buffer[sourceBuilding].Info;
            data.Unspawn(vehicleID);
            Randomizer randomizer = new Randomizer((int)vehicleID);
            info.m_buildingAI.CalculateSpawnPosition(sourceBuilding, ref instance.m_buildings.m_buffer[sourceBuilding], ref randomizer, base.m_info, out vector, out vector2);
            Quaternion identity = Quaternion.identity;
            Vector3 forward = vector2 - vector;
            if (forward.sqrMagnitude > 0.01f)
            {
                identity = Quaternion.LookRotation(forward);
            }
            data.m_frame0 = new Vehicle.Frame(vector, identity);
            data.m_frame1 = data.m_frame0;
            data.m_frame2 = data.m_frame0;
            data.m_frame3 = data.m_frame0;
            data.m_targetPos0 = vector;
            data.m_targetPos0.w = 2f;
            data.m_targetPos1 = vector2;
            data.m_targetPos1.w = 2f;
            data.m_targetPos2 = data.m_targetPos1;
            data.m_targetPos3 = data.m_targetPos1;
            if ((data.m_flags & Vehicle.Flags.TransferToTarget) != Vehicle.Flags.None)
            {
                int amountDelta = Mathf.Min(0, data.m_transferSize - this.m_cargoCapacity);
                info.m_buildingAI.ModifyMaterialBuffer(sourceBuilding, ref instance.m_buildings.m_buffer[sourceBuilding], (TransferManager.TransferReason)data.m_transferType, ref amountDelta);
                amountDelta = Mathf.Max(0, -amountDelta);
                data.m_transferSize = (ushort)(data.m_transferSize + ((ushort)amountDelta));
            }
            this.FrameDataUpdated(vehicleID, ref data, ref data.m_frame0);
            instance.m_buildings.m_buffer[sourceBuilding].AddOwnVehicle(vehicleID, ref data);
            if ((instance.m_buildings.m_buffer[sourceBuilding].m_flags & Building.Flags.IncomingOutgoing) != Building.Flags.None)
            {
                if ((data.m_flags & Vehicle.Flags.TransferToTarget) != Vehicle.Flags.None)
                {
                    data.m_flags |= Vehicle.Flags.Importing;
                }
                else if ((data.m_flags & Vehicle.Flags.TransferToSource) != Vehicle.Flags.None)
                {
                    data.m_flags |= Vehicle.Flags.Exporting;
                }
            }
        }
    }

    public override void SetTarget(ushort vehicleID, ref Vehicle data, ushort targetBuilding)
    {
        if (targetBuilding == data.m_targetBuilding)
        {
            if (data.m_path == 0)
            {
                if (!this.StartPathFind(vehicleID, ref data))
                {
                    data.Unspawn(vehicleID);
                }
            }
            else
            {
                this.TrySpawn(vehicleID, ref data);
            }
        }
        else
        {
            this.RemoveTarget(vehicleID, ref data);
            data.m_targetBuilding = targetBuilding;
            data.m_flags &= ~Vehicle.Flags.WaitingTarget;
            data.m_waitCounter = 0;
            if (targetBuilding != 0)
            {
                Singleton<BuildingManager>.instance.m_buildings.m_buffer[targetBuilding].AddGuestVehicle(vehicleID, ref data);
                if ((Singleton<BuildingManager>.instance.m_buildings.m_buffer[targetBuilding].m_flags & Building.Flags.IncomingOutgoing) != Building.Flags.None)
                {
                    if ((data.m_flags & Vehicle.Flags.TransferToTarget) != Vehicle.Flags.None)
                    {
                        data.m_flags |= Vehicle.Flags.Exporting;
                    }
                    else if ((data.m_flags & Vehicle.Flags.TransferToSource) != Vehicle.Flags.None)
                    {
                        data.m_flags |= Vehicle.Flags.Importing;
                    }
                }
            }
            else
            {
                if ((data.m_flags & Vehicle.Flags.TransferToTarget) != Vehicle.Flags.None)
                {
                    if (data.m_transferSize > 0)
                    {
                        TransferManager.TransferOffer offer = new TransferManager.TransferOffer
                        {
                            Priority = 7,
                            Vehicle = vehicleID
                        };
                        if (data.m_sourceBuilding != 0)
                        {
                            offer.Position = (Vector3)((data.GetLastFramePosition() + Singleton<BuildingManager>.instance.m_buildings.m_buffer[data.m_sourceBuilding].m_position) * 0.5f);
                        }
                        else
                        {
                            offer.Position = data.GetLastFramePosition();
                        }
                        offer.Amount = 1;
                        offer.Active = true;
                        Singleton<TransferManager>.instance.AddOutgoingOffer((TransferManager.TransferReason)data.m_transferType, offer);
                        data.m_flags |= Vehicle.Flags.WaitingTarget;
                    }
                    else
                    {
                        data.m_flags |= Vehicle.Flags.GoingBack;
                    }
                }
                if ((data.m_flags & Vehicle.Flags.TransferToSource) != Vehicle.Flags.None)
                {
                    if ((data.m_transferSize < this.m_cargoCapacity) && !this.ShouldReturnToSource(vehicleID, ref data))
                    {
                        TransferManager.TransferOffer offer2 = new TransferManager.TransferOffer
                        {
                            Priority = 7,
                            Vehicle = vehicleID
                        };
                        if (data.m_sourceBuilding != 0)
                        {
                            offer2.Position = (Vector3)((data.GetLastFramePosition() + Singleton<BuildingManager>.instance.m_buildings.m_buffer[data.m_sourceBuilding].m_position) * 0.5f);
                        }
                        else
                        {
                            offer2.Position = data.GetLastFramePosition();
                        }
                        offer2.Amount = 1;
                        offer2.Active = true;
                        Singleton<TransferManager>.instance.AddIncomingOffer((TransferManager.TransferReason)data.m_transferType, offer2);
                        data.m_flags |= Vehicle.Flags.WaitingTarget;
                    }
                    else
                    {
                        data.m_flags |= Vehicle.Flags.GoingBack;
                    }
                }
            }
            if (!this.StartPathFind(vehicleID, ref data))
            {
                data.Unspawn(vehicleID);
            }
        }
    }

    private bool ShouldReturnToSource(ushort vehicleID, ref Vehicle data)
    {
        if (data.m_sourceBuilding != 0)
        {
            BuildingManager instance = Singleton<BuildingManager>.instance;
            if (((instance.m_buildings.m_buffer[data.m_sourceBuilding].m_productionRate == 0) || ((instance.m_buildings.m_buffer[data.m_sourceBuilding].m_flags & (Building.Flags.BurnedDown | Building.Flags.Downgrading)) != Building.Flags.None)) && (instance.m_buildings.m_buffer[data.m_sourceBuilding].m_fireIntensity == 0))
            {
                return true;
            }
        }
        return false;
    }

    public override void SimulationStep(ushort vehicleID, ref Vehicle data, Vector3 physicsLodRefPos)
    {
        if (((data.m_flags & Vehicle.Flags.WaitingTarget) != Vehicle.Flags.None) && ((data.m_waitCounter = (byte)(data.m_waitCounter + 1)) > 20))
        {
            this.RemoveOffers(vehicleID, ref data);
            data.m_flags &= ~Vehicle.Flags.WaitingTarget;
            data.m_flags |= Vehicle.Flags.GoingBack;
            data.m_waitCounter = 0;
            if (!this.StartPathFind(vehicleID, ref data))
            {
                data.Unspawn(vehicleID);
            }
        }
        base.SimulationStep(vehicleID, ref data, physicsLodRefPos);
    }

    public override void SimulationStep(ushort vehicleID, ref Vehicle vehicleData, ref Vehicle.Frame frameData, ushort leaderID, ref Vehicle leaderData, int lodPhysics)
    {
        if ((vehicleData.m_flags & Vehicle.Flags.TransferToSource) != Vehicle.Flags.None)
        {
            if (vehicleData.m_transferSize < this.m_cargoCapacity)
            {
                this.TryCollectGarbage(vehicleID, ref vehicleData, ref frameData);
            }
            if (((vehicleData.m_transferSize >= this.m_cargoCapacity) && ((vehicleData.m_flags & Vehicle.Flags.GoingBack) == Vehicle.Flags.None)) && (vehicleData.m_targetBuilding != 0))
            {
                this.SetTarget(vehicleID, ref vehicleData, 0);
            }
        }
        base.SimulationStep(vehicleID, ref vehicleData, ref frameData, leaderID, ref leaderData, lodPhysics);
        if ((((vehicleData.m_flags & Vehicle.Flags.Arriving) != Vehicle.Flags.None) && (vehicleData.m_targetBuilding != 0)) && ((vehicleData.m_flags & (Vehicle.Flags.WaitingTarget | Vehicle.Flags.GoingBack | Vehicle.Flags.WaitingPath)) == Vehicle.Flags.None))
        {
            this.ArriveAtTarget(vehicleID, ref vehicleData);
        }
        if (((vehicleData.m_flags & (Vehicle.Flags.GoingBack | Vehicle.Flags.TransferToSource)) == Vehicle.Flags.TransferToSource) && this.ShouldReturnToSource(vehicleID, ref vehicleData))
        {
            this.SetTarget(vehicleID, ref vehicleData, 0);
        }
    }

    protected override bool StartPathFind(ushort vehicleID, ref Vehicle vehicleData)
    {
        if ((vehicleData.m_flags & Vehicle.Flags.WaitingTarget) != Vehicle.Flags.None)
        {
            return true;
        }
        if ((vehicleData.m_flags & Vehicle.Flags.GoingBack) != Vehicle.Flags.None)
        {
            if (vehicleData.m_sourceBuilding != 0)
            {
                Vector3 vector;
                Vector3 vector2;
                BuildingManager instance = Singleton<BuildingManager>.instance;
                BuildingInfo info = instance.m_buildings.m_buffer[vehicleData.m_sourceBuilding].Info;
                Randomizer randomizer = new Randomizer((int)vehicleID);
                info.m_buildingAI.CalculateUnspawnPosition(vehicleData.m_sourceBuilding, ref instance.m_buildings.m_buffer[vehicleData.m_sourceBuilding], ref randomizer, base.m_info, out vector, out vector2);
                return this.StartPathFind(vehicleID, ref vehicleData, (Vector3)vehicleData.m_targetPos3, vector2);
            }
        }
        else if (vehicleData.m_targetBuilding != 0)
        {
            Vector3 vector3;
            Vector3 vector4;
            BuildingManager manager2 = Singleton<BuildingManager>.instance;
            BuildingInfo info2 = manager2.m_buildings.m_buffer[vehicleData.m_targetBuilding].Info;
            Randomizer randomizer2 = new Randomizer((int)vehicleID);
            info2.m_buildingAI.CalculateUnspawnPosition(vehicleData.m_targetBuilding, ref manager2.m_buildings.m_buffer[vehicleData.m_targetBuilding], ref randomizer2, base.m_info, out vector3, out vector4);
            return this.StartPathFind(vehicleID, ref vehicleData, (Vector3)vehicleData.m_targetPos3, vector4);
        }
        return false;
    }

    public override void StartTransfer(ushort vehicleID, ref Vehicle data, TransferManager.TransferReason material, TransferManager.TransferOffer offer)
    {
        if (material == ((TransferManager.TransferReason)data.m_transferType))
        {
            if ((data.m_flags & Vehicle.Flags.WaitingTarget) != Vehicle.Flags.None)
            {
                this.SetTarget(vehicleID, ref data, offer.Building);
            }
        }
        else
        {
            base.StartTransfer(vehicleID, ref data, material, offer);
        }
    }

    private void TryCollectGarbage(ushort vehicleID, ref Vehicle vehicleData, ref Vehicle.Frame frameData)
    {
        Vector3 position = frameData.m_position;
        float num = position.x - 32f;
        float num2 = position.z - 32f;
        float num3 = position.x + 32f;
        float num4 = position.z + 32f;
        int num5 = Mathf.Max((int)(((num - 72f) / 64f) + 135f), 0);
        int num6 = Mathf.Max((int)(((num2 - 72f) / 64f) + 135f), 0);
        int num7 = Mathf.Min((int)(((num3 + 72f) / 64f) + 135f), 0x10d);
        int num8 = Mathf.Min((int)(((num4 + 72f) / 64f) + 135f), 0x10d);
        BuildingManager instance = Singleton<BuildingManager>.instance;
        for (int i = num6; i <= num8; i++)
        {
            for (int j = num5; j <= num7; j++)
            {
                ushort buildingID = instance.m_buildingGrid[(i * 270) + j];
                int num12 = 0;
                while (buildingID != 0)
                {
                    this.TryCollectGarbage(vehicleID, ref vehicleData, ref frameData, buildingID, ref instance.m_buildings.m_buffer[buildingID]);
                    buildingID = instance.m_buildings.m_buffer[buildingID].m_nextGridBuilding;
                    if (++num12 >= 0x8000)
                    {
                        CODebugBase<LogChannel>.Error(LogChannel.Core, "Invalid list detected!\n" + System.Environment.StackTrace);
                        break;
                    }
                }
            }
        }
    }

    private void TryCollectGarbage(ushort vehicleID, ref Vehicle vehicleData, ref Vehicle.Frame frameData, ushort buildingID, ref Building building)
    {
        if (Vector3.SqrMagnitude(building.CalculateSidewalkPosition() - frameData.m_position) < 1024f)
        {
            int amountDelta = Mathf.Min(0, vehicleData.m_transferSize - this.m_cargoCapacity);
            if (amountDelta != 0)
            {
                building.Info.m_buildingAI.ModifyMaterialBuffer(buildingID, ref building, (TransferManager.TransferReason)vehicleData.m_transferType, ref amountDelta);
                if (amountDelta != 0)
                {
                    vehicleData.m_transferSize = (ushort)(vehicleData.m_transferSize + ((ushort)Mathf.Max(0, -amountDelta)));
                }
            }
        }
    }

    public override void UpdateBuildingTargetPositions(ushort vehicleID, ref Vehicle vehicleData, Vector3 refPos, ushort leaderID, ref Vehicle leaderData, ref int index, float minSqrDistance)
    {
        if (((leaderData.m_flags & Vehicle.Flags.WaitingTarget) == Vehicle.Flags.None) && (((leaderData.m_flags & Vehicle.Flags.GoingBack) != Vehicle.Flags.None) && (leaderData.m_sourceBuilding != 0)))
        {
            Vector3 vector;
            Vector3 vector2;
            BuildingManager instance = Singleton<BuildingManager>.instance;
            BuildingInfo info = instance.m_buildings.m_buffer[leaderData.m_sourceBuilding].Info;
            Randomizer randomizer = new Randomizer((int)vehicleID);
            info.m_buildingAI.CalculateUnspawnPosition(vehicleData.m_sourceBuilding, ref instance.m_buildings.m_buffer[leaderData.m_sourceBuilding], ref randomizer, base.m_info, out vector, out vector2);
            vehicleData.SetTargetPos(index++, base.CalculateTargetPoint(refPos, vector2, minSqrDistance, 2f));
        }
    }
}
