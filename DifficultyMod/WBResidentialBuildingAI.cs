// Generated by .NET Reflector from C:\Projects\Skylines\DifficultyMod\DifficultyMod\libs\Assembly-CSharp.dll
using ColossalFramework;
using ColossalFramework.Globalization;
using ColossalFramework.Math;
using ColossalFramework.Plugins;
using System;
using System.Runtime.InteropServices;
using UnityEngine;

public class WBResidentialBuildingAI : ResidentialBuildingAI
{
    public override void ModifyMaterialBuffer(ushort buildingID, ref Building data, TransferManager.TransferReason material, ref int amountDelta)
    {
        switch (material)
        {
            case TransferManager.TransferReason.Worker0:
            case TransferManager.TransferReason.Worker1:
            case TransferManager.TransferReason.Worker2:
            case TransferManager.TransferReason.Worker3:
                {
                    int num = data.m_customBuffer1;
                    amountDelta = Mathf.Clamp(amountDelta, -num, 1000 - num);
                    data.m_customBuffer1 = (ushort)(num + amountDelta);
                    return;
                }
        }
        base.ModifyMaterialBuffer(buildingID, ref data, material, ref amountDelta);
    }

    protected override void SimulationStepActive(ushort buildingID, ref Building buildingData, ref Building.Frame frameData)
    {
        base.SimulationStepActive(buildingID,ref buildingData,ref frameData);
        Notification.Problem problem = Notification.RemoveProblems(buildingData.m_problems, Notification.Problem.TooFewServices);
        //if ((buildingData.m_flags & Building.Flags.Active) != Building.Flags.None)
        //{
            if (buildingData.m_customBuffer1 > 300)
            {
                buildingData.m_outgoingProblemTimer = (byte)Mathf.Min(0xff, buildingData.m_outgoingProblemTimer + 1);
                if (buildingData.m_outgoingProblemTimer >= 220)
                {
                    problem = Notification.AddProblems(problem, Notification.Problem.MajorProblem | Notification.Problem.TooFewServices);
                }
                else if (buildingData.m_outgoingProblemTimer >= 80)
                {
                    problem = Notification.AddProblems(problem, Notification.Problem.TooFewServices);
                }
            }
            else
            {
                buildingData.m_outgoingProblemTimer = 0;
            }
        //}
        buildingData.m_problems = problem;

    }
}
